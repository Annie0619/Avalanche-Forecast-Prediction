"0","# STEP 1 â€” Target + time-based splits ---------------------------------------"
"0","set.seed(7)"
"0",""
"0","# 0) Ensure the columns we need exist & are the right type"
"0","stopifnot(all(c(""Date"") %in% names(aval)))"
"0",""
"0","# If FAH_ord doesn't exist or isn't correctly ordered, (re)create it from FAH"
"0","target_levels <- c(""Low"",""Moderate"",""Considerable -"",""Considerable +"",""High"")"
"0","if (!(""FAH_ord"" %in% names(aval)) ||"
"0","    !is.ordered(aval$FAH_ord) ||"
"0","    !identical(levels(aval$FAH_ord), target_levels)) {"
"0","  stopifnot(""FAH"" %in% names(aval))"
"0","  aval <- aval %>%"
"0","    mutate(FAH_ord = factor(FAH, levels = target_levels, ordered = TRUE))"
"0","}"
"0",""
"0","# Parse Date robustly if needed"
"0","if (!inherits(aval$Date, ""Date"")) {"
"0","  aval <- aval %>%"
"0","    mutate(Date = as.Date(parse_date_time("
"0","      Date, orders = c(""ymd HMS"",""ymd HM"",""ymd"",""dmy HMS"",""dmy HM"",""dmy"")"
"0","    )))"
"0","}"
"0",""
"0","# Drop rows with missing target or Date (NNs can't train on NA targets)"
"0","aval <- aval %>% filter(!is.na(Date), !is.na(FAH_ord))"
"0",""
"0","# 1) Create time-based splits: 70% train, 15% val, 15% test by calendar time"
"0","cut1 <- quantile(aval$Date, probs = 0.70, na.rm = TRUE, type = 1)"
"0","cut2 <- quantile(aval$Date, probs = 0.85, na.rm = TRUE, type = 1)"
"0",""
"0","train <- aval %>% filter(Date <= cut1)"
"0","val   <- aval %>% filter(Date >  cut1 & Date <= cut2)"
"0","test  <- aval %>% filter(Date >  cut2)"
"0",""
"0","# Sanity checks: no overlap & correct ordering"
"0","stopifnot(max(train$Date) < min(val$Date), max(val$Date) < min(test$Date))"
"0",""
"0","# 2) Quick class balance check (important for NN)"
"0","cat(""Train date range: "", min(train$Date), ""to"", max(train$Date), ""\n"")"
"1","Train date range: "
"1"," "
"1","14595"
"1"," "
"1","to"
"1"," "
"1","18668"
"1"," "
"1","
"
"0","cat(""Val   date range: "", min(val$Date),   ""to"", max(val$Date),   ""\n"")"
"1","Val   date range: "
"1"," "
"1","18669"
"1"," "
"1","to"
"1"," "
"1","19405"
"1"," "
"1","
"
"0","cat(""Test  date range: "", min(test$Date),  ""to"", max(test$Date),  ""\n\n"")"
"1","Test  date range: "
"1"," "
"1","19406"
"1"," "
"1","to"
"1"," "
"1","20164"
"1"," "
"1","

"
"0","cat(""Class counts (train):\n""); print(table(train$FAH_ord))"
"1","Class counts (train):
"
"1","
"
"1","           Low "
"1","      Moderate "
"1","Considerable - "
"1","Considerable + "
"1","          High "
"1","
"
"1","          1628 "
"1","          2293 "
"1","          2200 "
"1","           819 "
"1","           456 "
"1","
"
"0","cat(""\nClass proportions (train):\n""); print(round(prop.table(table(train$FAH_ord)), 3))"
"1","
Class proportions (train):
"
"1","
"
"1","           Low "
"1","      Moderate "
"1","Considerable - "
"1","Considerable + "
"1","          High "
"1","
"
"1","         0.220 "
"1","         0.310 "
"1","         0.297 "
"1","         0.111 "
"1","         0.062 "
"1","
"
"0","cat(""\nClass counts (val):\n""); print(table(val$FAH_ord))"
"1","
Class counts (val):
"
"1","
"
"1","           Low "
"1","      Moderate "
"1","Considerable - "
"1","Considerable + "
"1","          High "
"1","
"
"1","           843 "
"1","           483 "
"1","           198 "
"1","            57 "
"1","             3 "
"1","
"
"0","cat(""\nClass counts (test):\n""); print(table(test$FAH_ord))"
"1","
Class counts (test):
"
"1","
"
"1","           Low "
"1","      Moderate "
"1","Considerable - "
"1","Considerable + "
"1","          High "
"1","
"
"1","           960 "
"1","           461 "
"1","           100 "
"1","            57 "
"1","             0 "
"1","
"
