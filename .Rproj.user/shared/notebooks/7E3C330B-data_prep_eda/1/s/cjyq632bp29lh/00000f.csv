"0","## 0) Define and validate keys -----------------------------------------------"
"0","key_cols <- c(""Date"", ""OSgrid"", ""Area"")"
"0","missing_keys <- setdiff(key_cols, names(aval))"
"0","if (length(missing_keys)) {"
"0","  stop(""These key columns are not in `aval`: "", paste(missing_keys, collapse = "", ""))"
"0","}"
"0",""
"0","## 1) Build candidate non-key columns once (and be explicit) -----------------"
"0","non_key_cols <- setdiff(names(aval), key_cols)"
"0",""
"0","## 2) Find conflicts in ANY column type (numeric OR categorical) -------------"
"0","# - use any_of() so it won't error if something is off"
"0","# - n_distinct on na.omit for each column within the key"
"0","wide_conflicts <- aval %>%"
"0","  group_by(across(all_of(key_cols))) %>%"
"0","  summarise("
"0","    across(all_of(non_key_cols), ~ n_distinct(na.omit(.x)), .names = ""nuniq_{.col}""),"
"0","    .groups = ""drop"""
"0","  ) %>%"
"0","  # mark groups where any column has >1 distinct observed value"
"0","  mutate(any_conflict = if_any(starts_with(""nuniq_""), ~ .x > 1)) %>%"
"0","  filter(any_conflict) %>%"
"0","  select(all_of(key_cols)) %>%"
"0","  distinct()"
"0",""
"0","## 3) Collapse only conflict-free groups -------------------------------------"
"0","# typed NA + first_non_na for safe collapsing"
"0",""
"0","first_non_na <- function(x) {"
"0","  i <- which(!is.na(x))[1]"
"0","  if (is.na(i)) x[NA_integer_] else x[i]"
"0","}"
"0",""
"0","collapsed_ok <- aval %>%"
"0","  anti_join(wide_conflicts, by = key_cols) %>%"
"0","  group_by(across(all_of(key_cols))) %>%"
"0","  summarise("
"0","    across(all_of(non_key_cols), first_non_na),"
"0","    .rows_collapsed = dplyr::n(),"
"0","    .collapsed = TRUE,"
"0","    .groups = ""drop"""
"0","  )"
"0",""
"0","## 4) Keep conflicting groups as-is (flag them) -------------------------------"
"0","kept_conflicts <- aval %>%"
"0","  semi_join(wide_conflicts, by = key_cols) %>%"
"0","  mutate(.collapsed = FALSE)"
"0",""
"0","## 5) Combine and (optionally) drop flags ------------------------------------"
"0","aval_dups_resolved <- bind_rows(collapsed_ok, kept_conflicts) %>%"
"0","  arrange(across(all_of(key_cols)))"
"0",""
"0","aval <- aval_dups_resolved %>% select(-.collapsed, -.rows_collapsed)"
