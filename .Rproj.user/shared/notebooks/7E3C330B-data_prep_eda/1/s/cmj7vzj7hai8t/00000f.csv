"0","# --- 1) Helper: call Open-Elevation for a batch of lat/lon points ---"
"0","# Expects a tibble/data.frame with columns: latitude, longitude"
"0","# Returns: tibble(latitude, longitude, elev_m)"
"0","oe_lookup_batch <- function(points_df) {"
"0","  if (nrow(points_df) == 0) return(tibble(latitude = numeric(), longitude = numeric(), elev_m = numeric()))"
"0","  # Build ""lat,lon|lat,lon|..."" string"
"0","  locs <- points_df %>%"
"0","    transmute(pair = sprintf(""%.6f,%.6f"", latitude, longitude)) %>%"
"0","    pull(pair) %>%"
"0","    paste(collapse = ""|"")"
"0",""
"0","  url <- paste0(""https://api.open-elevation.com/api/v1/lookup?locations="", URLencode(locs))"
"0",""
"0","  resp <- request(url) |> req_timeout(30) |> req_perform()"
"0",""
"0","  if (resp_status(resp) != 200) {"
"0","    warning(""Open-Elevation request failed with status: "", resp_status(resp))"
"0","    return(tibble(latitude = numeric(), longitude = numeric(), elev_m = numeric()))"
"0","  }"
"0",""
"0","  dat <- resp_body_json(resp, simplifyVector = TRUE)"
"0","  res <- as_tibble(dat$results)"
"0","  # API returns 'elevation' (meters), 'latitude', 'longitude'"
"0","  res %>%"
"0","    transmute("
"0","      latitude  = as.numeric(latitude),"
"0","      longitude = as.numeric(longitude),"
"0","      elev_m    = as.numeric(elevation)"
"0","    )"
"0","}"
"0",""
"0","# --- 2) Wrapper: batch over many points, with simple rate limiting & safety ---"
"0","oe_lookup <- function(points_df, batch_size = 80, sleep_secs = 1) {"
"0","  # round coords to reduce accidental duplicates/float precision issues"
"0","  pts <- points_df %>%"
"0","    transmute("
"0","      latitude  = round(as.numeric(latitude), 6),"
"0","      longitude = round(as.numeric(longitude), 6)"
"0","    ) %>%"
"0","    distinct()"
"0",""
"0","  batches <- split(pts, ceiling(seq_len(nrow(pts)) / batch_size))"
"0",""
"0","  safe_batch <- safely(oe_lookup_batch, otherwise = tibble(latitude=numeric(), longitude=numeric(), elev_m=numeric()))"
"0","  results <- map(batches, function(b) {"
"0","    out <- safe_batch(b)"
"0","    Sys.sleep(sleep_secs)"
"0","    if (!is.null(out$error)) warning(""Batch failed: "", out$error)"
"0","    out$result"
"0","  })"
"0",""
"0","  bind_rows(results)"
"0","}"
"0",""
"0","# --- 3) Apply to your data: only rows with missing Alt ---"
"0","# Assumes your data frame is named `aval` and has columns Alt, latitude, longitude"
"0","to_fill <- aval %>%"
"0","  filter(is.na(Alt)) %>%"
"0","  transmute(latitude = latitude, longitude = longitude)"
"0",""
"0","elev_tbl <- oe_lookup(to_fill, batch_size = 80, sleep_secs = 1)"
"0",""
"0","# --- 4) Join back and fill Alt where missing ---"
"0","# 1) Build a lookup key on the API results (rounded to match request precision)"
"0","elev_lu <- elev_tbl %>%"
"0","  mutate(key = paste0(round(latitude, 6), ""_"", round(longitude, 6))) %>%"
"0","  select(key, elev_m)"
"0","# one of the values is zero altitude: this is in the ocean (see map)"
"0",""
"0","# Coordinates whose elevation came back as exactly 0"
"0","zero_pts <- elev_tbl %>%"
"0","  filter(!is.na(elev_m), elev_m == 0) %>%"
"0","  transmute(x = round(longitude, 6), y = round(latitude, 6)) %>%"
"0","  distinct()"
