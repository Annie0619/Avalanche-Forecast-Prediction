[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "multiplication.html",
    "href": "multiplication.html",
    "title": "Multiplying numbers in R",
    "section": "",
    "text": "To multiply numbers in R use *\n\n2 * 3\n\n[1] 6"
  },
  {
    "objectID": "data_prep_eda.html",
    "href": "data_prep_eda.html",
    "title": "Data Preparation and EDA",
    "section": "",
    "text": "We begin by doing the following: 1. Change the ‘Date’ variable to a Date class and extract the year, month and day of year (doy) as new variables. 2. Create a new variable called ‘Season’ that groups the months together into seasons 3. Ensure text variables are character classes and that indicators are factors 4. Create a new variable for the response called FAH_ord, that casts FAH as a factor and assigns the different values to ordered levels 5. Convert all the wind direction and aspect variables to their sine and cosine versions so that degrees that are far apart numerically but close together geographically would be close together numerically as well (ex. 0 degrees and 350 degrees).\nSome specific questions regarding the data: 1. Is longitude and latitude constant within OSgrid? 2. Is Alt constant within OSgrid?\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: OSgrid &lt;chr&gt;, n_coords &lt;int&gt;\n\n\n# A tibble: 1,271 × 2\n   OSgrid   n_alt\n   &lt;chr&gt;    &lt;int&gt;\n 1 NG773424     3\n 2 NG773426     2\n 3 NG774425     5\n 4 NG774426     2\n 5 NG777424     2\n 6 NG777425     4\n 7 NG778413     2\n 8 NG778415     2\n 9 NG779424     2\n10 NG780424     2\n# ℹ 1,261 more rows"
  },
  {
    "objectID": "data_prep_eda.html#visualise-missingness",
    "href": "data_prep_eda.html#visualise-missingness",
    "title": "Data Preparation and EDA",
    "section": "Visualise missingness",
    "text": "Visualise missingness\nDetermine the percentage missing values per variable and visualise this.\n\n\n# A tibble: 39 × 2\n   variable          pct_missing\n   &lt;chr&gt;                   &lt;dbl&gt;\n 1 AV.Cat                  23.3 \n 2 Ski.Pen                 22.5 \n 3 Summit.Wind.Dir         12.4 \n 4 Crystals                 9.26\n 5 Summit.Wind.Speed        8.52\n 6 Summit.Air.Temp          7.07\n 7 Snow.Index               6.96\n 8 Max.Temp.Grad            6.62\n 9 Max.Hardness.Grad        5.86\n10 Wetness                  5.40\n# ℹ 29 more rows"
  },
  {
    "objectID": "data_prep_eda.html#strategy-for-missing-values",
    "href": "data_prep_eda.html#strategy-for-missing-values",
    "title": "Data Preparation and EDA",
    "section": "Strategy for missing values",
    "text": "Strategy for missing values\nFrom the above, only 10 variables have more than 5% of their values missing. Careful attention is paid to these below. The remaining variables have \\(&lt;5\\%\\) missing values and will simply be imputed with a Bagged-tree imputation approach.\nOf the variables missing more than 5%, we first need to determine if the missingness carries meaning. The list of variables is thus split in two, one where missingness does carry meaning and need to be accounted for and one where it does not.\nThe variables that do need to be accounted for are: - AV.Cat (23.4%): Missing avalanche category values likely mean that no category was assigned for that day. Forecasters usually provide a category when avalanches are observed or when conditions are clear enough to classify. If it is missing, that could itself indicate that avalanches were not observed or that conditions were uncertain, which is meaningful information about overall stability.\n\nSki.Pen (22.5%): Ski penetration is only recorded when conditions allow observers to ski on the slope. If this field is missing, it often means the snow was too hard, too shallow, or otherwise unsuitable for skiing. This absence therefore reflects snow surface properties that can be related to avalanche hazard.\nCrystals (9.3%): Crystal type is identified through snow-pit observations. Missing values here often mean that no pit was dug on that day, which in turn may depend on perceived stability, time constraints, or safety concerns. Thus, the lack of a crystal observation can itself provide information about conditions.\nWetness (5.4%): Wetness is typically noted when meltwater or damp snow is present. If this field is missing, it may indicate that the snow was dry and that observers did not see a reason to record wetness. Hence, missingness can indirectly point to dry-snow conditions.\nSnow.Index (7.0%): This is a derived stability metric based on snowpack tests. If the value is missing, it likely means the relevant tests were not carried out, perhaps because conditions didn’t warrant them. This absence can therefore reflect judgments about snow stability.\nSummit.Wind.Dir_sin / Summit.Wind.Dir_cos (12.4%), Summit.Wind.Speed (8.5%), and Summit.Air.Temp (7.1%): Missing summit weather variables may not just be sensor errors. It is plausible that readings were unavailable because weather at the summit was too extreme or dangerous for measurement, such as during storms or blizzards. In that case, missingness itself could be linked to hazardous conditions.\n\nFor each of these, an indicator will be created to show if the value was missing.\nThose variables that do not need explicit missingness indicators are:\n\nMax.Temp.Grad (6.7%): This variable reflects temperature gradients measured in snow-pit tests. When missing, it is usually because the snow-pit test was not performed. However, the decision not to perform a pit is already captured by other variables where missingness is more clearly informative (e.g. Crystals, Snow.Index). Adding another indicator here would add redundancy without extra insight. The values themselves will be imputed with KNN.\nMax.Hardness.Grad (5.9%): Like Max.Temp.Grad, hardness gradients are only measured in pits. Missing values again overlap with the same “pit not performed” scenario already captured by other indicators. For this reason, a separate indicator is unnecessary. The variable will be imputed with KNN to fill the missing numeric values.\n\nAfter the relevant indicators are created, all remaining missing values will be imputed with Bagged tree imputation. Bagged tree imputation is a machine-learning approach where missing values in a variable are predicted using an ensemble of decision trees fit on the observed cases. Each tree is trained on a bootstrap sample of the data, and predictions are averaged across trees to produce stable and robust imputations. Unlike simple mean/median imputation or KNN, bagged trees can capture non-linear relationships and interactions among predictors, making them well suited to complex, structured data.\nIn the avalanche dataset, where variables combine topography, weather, and snowpack characteristics, and missingness can depend on multiple interacting factors, bagged tree imputation offers a principled way to exploit those dependencies while limiting noise from any single predictor. This allows us to fill gaps more realistically while preserving the multivariate structure that is important for downstream modeling with neural networks.\nThe imputation will be done at a later stage. At first, the data still needs to be cleaned. Note that these missing values were intentionally set now before looking at improbable or outlier values below that are then encoded as NA. The reason for this is to truly only capture “meaningful” missingness in these indicators and not convolute them with missingness due to incorrect values being entered."
  }
]