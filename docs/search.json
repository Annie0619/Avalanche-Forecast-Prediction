[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "multiplication.html",
    "href": "multiplication.html",
    "title": "Multiplying numbers in R",
    "section": "",
    "text": "To multiply numbers in R use *\n\n2 * 3\n\n[1] 6"
  },
  {
    "objectID": "data_prep_eda.html",
    "href": "data_prep_eda.html",
    "title": "Data Preparation and EDA",
    "section": "",
    "text": "We begin by doing the following: 1. Change the ‘Date’ variable to a Date class and extract the year, month and day of year (doy) as new variables. 2. Create a new variable called ‘Season’ that groups the months together into seasons 3. Ensure text variables are character classes and that indicators are factors 4. Create a new variable for the response called FAH_ord, that casts FAH as a factor and assigns the different values to ordered levels 5. Convert all the wind direction and aspect variables to their sine and cosine versions so that degrees that are far apart numerically but close together geographically would be close together numerically as well (ex. 0 degrees and 350 degrees).\nSome specific questions regarding the data: 1. Is longitude and latitude constant within OSgrid? 2. Is Alt constant within OSgrid?\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: OSgrid &lt;chr&gt;, n_coords &lt;int&gt;\n\n\n# A tibble: 1,271 × 2\n   OSgrid   n_alt\n   &lt;chr&gt;    &lt;int&gt;\n 1 NG773424     3\n 2 NG773426     2\n 3 NG774425     5\n 4 NG774426     2\n 5 NG777424     2\n 6 NG777425     4\n 7 NG778413     2\n 8 NG778415     2\n 9 NG779424     2\n10 NG780424     2\n# ℹ 1,261 more rows"
  },
  {
    "objectID": "data_prep_eda.html#visualise-missingness",
    "href": "data_prep_eda.html#visualise-missingness",
    "title": "Data Preparation and EDA",
    "section": "Visualise missingness",
    "text": "Visualise missingness\nDetermine the percentage missing values per variable and visualise this.\n\n\n# A tibble: 39 × 2\n   variable          pct_missing\n   &lt;chr&gt;                   &lt;dbl&gt;\n 1 AV.Cat                  23.3 \n 2 Ski.Pen                 22.5 \n 3 Summit.Wind.Dir         12.4 \n 4 Crystals                 9.26\n 5 Summit.Wind.Speed        8.52\n 6 Summit.Air.Temp          7.07\n 7 Snow.Index               6.96\n 8 Max.Temp.Grad            6.62\n 9 Max.Hardness.Grad        5.86\n10 Wetness                  5.40\n# ℹ 29 more rows"
  },
  {
    "objectID": "data_prep_eda.html#strategy-for-missing-values",
    "href": "data_prep_eda.html#strategy-for-missing-values",
    "title": "Data Preparation and EDA",
    "section": "Strategy for missing values",
    "text": "Strategy for missing values\nFrom the above, only 10 variables have more than 5% of their values missing. Careful attention is paid to these below. The remaining variables have \\(&lt;5\\%\\) missing values and will simply be imputed with a Bagged-tree imputation approach.\nOf the variables missing more than 5%, we first need to determine if the missingness carries meaning. The list of variables is thus split in two, one where missingness does carry meaning and need to be accounted for and one where it does not.\nThe variables that do need to be accounted for are: - AV.Cat (23.4%): Missing avalanche category values likely mean that no category was assigned for that day. Forecasters usually provide a category when avalanches are observed or when conditions are clear enough to classify. If it is missing, that could itself indicate that avalanches were not observed or that conditions were uncertain, which is meaningful information about overall stability.\n\nSki.Pen (22.5%): Ski penetration is only recorded when conditions allow observers to ski on the slope. If this field is missing, it often means the snow was too hard, too shallow, or otherwise unsuitable for skiing. This absence therefore reflects snow surface properties that can be related to avalanche hazard.\nCrystals (9.3%): Crystal type is identified through snow-pit observations. Missing values here often mean that no pit was dug on that day, which in turn may depend on perceived stability, time constraints, or safety concerns. Thus, the lack of a crystal observation can itself provide information about conditions.\nWetness (5.4%): Wetness is typically noted when meltwater or damp snow is present. If this field is missing, it may indicate that the snow was dry and that observers did not see a reason to record wetness. Hence, missingness can indirectly point to dry-snow conditions.\nSnow.Index (7.0%): This is a derived stability metric based on snowpack tests. If the value is missing, it likely means the relevant tests were not carried out, perhaps because conditions didn’t warrant them. This absence can therefore reflect judgments about snow stability.\nSummit.Wind.Dir_sin / Summit.Wind.Dir_cos (12.4%), Summit.Wind.Speed (8.5%), and Summit.Air.Temp (7.1%): Missing summit weather variables may not just be sensor errors. It is plausible that readings were unavailable because weather at the summit was too extreme or dangerous for measurement, such as during storms or blizzards. In that case, missingness itself could be linked to hazardous conditions.\n\nFor each of these, an indicator will be created to show if the value was missing.\nThose variables that do not need explicit missingness indicators are:\n\nMax.Temp.Grad (6.7%): This variable reflects temperature gradients measured in snow-pit tests. When missing, it is usually because the snow-pit test was not performed. However, the decision not to perform a pit is already captured by other variables where missingness is more clearly informative (e.g. Crystals, Snow.Index). Adding another indicator here would add redundancy without extra insight. The values themselves will be imputed with KNN.\nMax.Hardness.Grad (5.9%): Like Max.Temp.Grad, hardness gradients are only measured in pits. Missing values again overlap with the same “pit not performed” scenario already captured by other indicators. For this reason, a separate indicator is unnecessary. The variable will be imputed with KNN to fill the missing numeric values.\n\nAfter the relevant indicators are created, all remaining missing values will be imputed with Bagged tree imputation. Bagged tree imputation is a machine-learning approach where missing values in a variable are predicted using an ensemble of decision trees fit on the observed cases. Each tree is trained on a bootstrap sample of the data, and predictions are averaged across trees to produce stable and robust imputations. Unlike simple mean/median imputation or KNN, bagged trees can capture non-linear relationships and interactions among predictors, making them well suited to complex, structured data.\nIn the avalanche dataset, where variables combine topography, weather, and snowpack characteristics, and missingness can depend on multiple interacting factors, bagged tree imputation offers a principled way to exploit those dependencies while limiting noise from any single predictor. This allows us to fill gaps more realistically while preserving the multivariate structure that is important for downstream modeling with neural networks.\nThe imputation will be done at a later stage. At first, the data still needs to be cleaned. Note that these missing values were intentionally set now before looking at improbable or outlier values below that are then encoded as NA. The reason for this is to truly only capture “meaningful” missingness in these indicators and not convolute them with missingness due to incorrect values being entered."
  },
  {
    "objectID": "A1_Report_Final_Draft_html.html",
    "href": "A1_Report_Final_Draft_html.html",
    "title": "Avalanche Risk Prediction",
    "section": "",
    "text": "Forecast avalanche hazard (FAH) is reported on an ordered five-level scale, making the correct ordering of predictions as important as the exact class assignment. We build a modelling-ready dataset from operational observations in Scotland and cast next-day FAH as an ordinal forecasting problem. Data preparation standardises identifiers, audits and repairs missingness, applies physically sensible bounds, encodes circular variables with sine-cosine pairs, and adds seasonal day-of-year features. We split chronologically (80/20) with an embargo to avoid look-ahead.\nFor modelling, we turn each area�s history into 14-day windows of dynamic features, fuse static site attributes, and train an LSTM with a CORN ordinal head that predicts \\(K - 1\\) exceedance probabilities. Class imbalance is handled by oversampling rare classes in minibatches and class-balanced per-threshold weights in the loss. We then tune monotone thresholds on the most recent validation fold to convert probabilities into labels.\nValidation uses forward-chaining time folds; evaluation on a held-out test window reports Accuracy, Macro-F1, MAE, and Quadratic Weighted Kappa (QWK). Compared with three simple baselines (global majority, per-area majority, and persistence), the LSTM-CORN model improves ordinal-aware agreement (QWK) and reduces absolute error (MAE), with most mistakes within one level of the truth. Limitations include scarcity of High hazard days and potential sensitivity to the temporal split, but the approach is reproducible and operationally realistic, and it provides a clear path to calibration and extension."
  },
  {
    "objectID": "A1_Report_Final_Draft_html.html#abstract",
    "href": "A1_Report_Final_Draft_html.html#abstract",
    "title": "Avalanche Risk Prediction",
    "section": "",
    "text": "Forecast avalanche hazard (FAH) is reported on an ordered five-level scale, making the correct ordering of predictions as important as the exact class assignment. We build a modelling-ready dataset from operational observations in Scotland and cast next-day FAH as an ordinal forecasting problem. Data preparation standardises identifiers, audits and repairs missingness, applies physically sensible bounds, encodes circular variables with sine-cosine pairs, and adds seasonal day-of-year features. We split chronologically (80/20) with an embargo to avoid look-ahead.\nFor modelling, we turn each area�s history into 14-day windows of dynamic features, fuse static site attributes, and train an LSTM with a CORN ordinal head that predicts \\(K - 1\\) exceedance probabilities. Class imbalance is handled by oversampling rare classes in minibatches and class-balanced per-threshold weights in the loss. We then tune monotone thresholds on the most recent validation fold to convert probabilities into labels.\nValidation uses forward-chaining time folds; evaluation on a held-out test window reports Accuracy, Macro-F1, MAE, and Quadratic Weighted Kappa (QWK). Compared with three simple baselines (global majority, per-area majority, and persistence), the LSTM-CORN model improves ordinal-aware agreement (QWK) and reduces absolute error (MAE), with most mistakes within one level of the truth. Limitations include scarcity of High hazard days and potential sensitivity to the temporal split, but the approach is reproducible and operationally realistic, and it provides a clear path to calibration and extension."
  },
  {
    "objectID": "A1_Report_Final_Draft_html.html#introduction",
    "href": "A1_Report_Final_Draft_html.html#introduction",
    "title": "Avalanche Risk Prediction",
    "section": "Introduction",
    "text": "Introduction\nAvalanche hazard is reported on an ordered five-level scale, making the correct ordering of predictions as important as the exact class assignment. According to the Conceptual Model of Avalanche Hazard (Statham et al., 2018), the hazard level is determined by combining two ordinal variables-likelihood of avalanche occurrence and destructive size-into a single danger rating. This motivates treating FAH as an ordinal rather than a nominal target.\nThis project assembles a modelling-ready dataset from Scottish observations and frames next-day Forecast Avalanche Hazard (FAH) as an ordinal forecasting problem. Data preparation (in R) standardises identifiers, audits and repairs missing values, applies physical plausibility checks, encodes circular angles as sine/cosine, and adds day-of-year seasonality. Model matrices are exported with an ordered target, and a chronological \\(80/20\\) split prevents look-ahead.\nMethodologically, we use a sequence model to reflect that hazard depends on recent conditions. We frame each area-day as a one-step-ahead forecast and feed the model a fixed 14-day look-back of daily predictors together with static site attributes. This mirrors the standard time-series set-up in which inputs comprise a recent window of observations plus static metadata (Lim and Zohren, 2021; Eq. 2.1). We implement the encoder with an LSTM over the 14-day window and concatenate the static features before the output layer.\nFor the ordinal output layer we adopt CORN (Conditional Ordinal Regression for Neural Networks). CORN decomposes a \\(K\\)-class ordered target into \\(K - 1\\) conditional exceedance tasks that estimate \\(P(y &gt; k \\mid y &gt; k - 1)\\); the unconditional exceedance probabilities \\(P(y &gt; k)\\) follow by the probability chain rule, which guarantees rank-consistent (non-increasing) probabilities across thresholds. Final class labels are obtained by thresholding these \\(K - 1\\) probabilities and counting exceedances (Cao, Mirjalili and Raschka, 2020).\nBecause High levels are rare, we address class imbalance in two ways. First, we oversample minority classes within batches. Second, we apply the class-balanced loss based on the effective number of samples, which weights each class by \\((1 - \\beta)/(1 - \\beta^{n_c})\\) so rare classes have more influence without fabricating data (Cui et al., 2019, Sec. 3).\nValidation uses forward-chaining folds with a 10-day embargo to reflect operational constraints. Model performance is evaluated on a held-out test window using Accuracy, Macro-F1, MAE, and Quadratic Weighted Kappa (QWK). Three baseline models are used for comparison: global majority, per-area majority, and persistence (yesterday�s value). All code is reproducible, with deterministic seeds and cached lookups, and all preprocessing parameters are fit on the training data and then applied to the test set through a baked pipeline."
  },
  {
    "objectID": "A1_Report_Final_Draft_html.html#data-methods",
    "href": "A1_Report_Final_Draft_html.html#data-methods",
    "title": "Avalanche Risk Prediction",
    "section": "Data & Methods",
    "text": "Data & Methods\n\nData\nWe analysed a 2009-2025 archive of daily avalanche forecasts from the Scottish Avalanche Information Service across six forecasting regions. The prediction target is the forecast avalanche hazard (FAH) for the following day, encoded as an ordered categorical variable with levels:\nLow &lt; Moderate &lt; Considerable - &lt; Considerable + &lt; High\nPredictors comprise:\n1. Site and topography - OS grid identifier, location name, longitude, latitude, altitude, incline.\n2. Contemporaneous meteorology near the forecast location - summit air temperature, summit wind speed and direction, lower-level winds, cloud, and insolation.\n3. Snowpack observations derived from field tests - snow temperature, maximum temperature and hardness gradients, foot and ski penetration indices, crystal type, wetness, and a derived stability index.\nTo avoid information leakage for the FAH task, the observed hazard on the following day (OAH) was removed from the analysis dataset.\n\n\nMethods: Data Preparation, Cleaning, and Pre-processing\n\n1. Type standardisation and initial feature engineering\nWe converted timestamps to Date and derived year, month, day-of-year (doy), and meteorological season (DJF/MAM/JJA/SON). Identifiers and descriptors were given sensible types (e.g., Area as a factor; OS grid and location as character). The hazard response was stored as an ordered factor (FAH_ord) using the level order defined above. These steps preserve the outcome�s ordinal structure for modelling and evaluation and add explicit seasonality features for downstream encoding.\n\n\n2. Spatial consistency checks\nWe examined whether OS grids denote unique points. Longitude and latitude vary within OS grids, indicating that an OS grid represents an area rather than a single coordinate. Altitude is not constant within OS grids. Accordingly, altitude should not be imputed from the OS grid identifier alone: since each grid covers heterogeneous terrain, we instead query elevation using the precise latitude-longitude coordinates.\n\n\n3. Record keys, duplicates, and consolidation\nWe treated (Date, OSgrid, Area) as the record key. For any key with multiple rows, we counted-column by column-how many distinct non-missing values appeared.\n\nIf the duplicates differed only by missing values, we collapsed them to a single row, taking the first available non-missing value in each column.\nIf any column showed truly conflicting observations (more than one distinct non-missing value), we kept all rows for that key and flagged the group as conflicted.\n\nThis approach preserves genuine differences, avoids inventing data, and leaves a clear audit trail wherever sources disagree.\n\n\n4. Missingness audit and design of indicators\nWe first measured missingness per variable and inspected its pattern. Where the absence itself could be informative, we created explicit 0/1 “was-missing” flags (before any outlier recoding). These indicators were made for: AV.cat, Ski.pen, Crystals, Wetness, Snow.Index, and the summit weather fields (Summit.Wind.Dir, Summit.Wind.Speed, Summit.Air.Temp). Doing this early ensures the indicators reflect the data as collected and aren�t confounded by later plausibility filters.\nSome fields (e.g., Max.Temp.Grad, Max.Hardness.Grad) are only measured when a snow pit is carried out. When no pit is done those fields are blank by design, so we did not add extra “missing” indicators; instead, we impute those numeric blanks downstream for modelling.\nSnow.Index check: Because many values are exactly zero, we tested whether Snow.Index == 0 was being used as a stand-in for “no test.” It wasn�t: rows with Snow.Index = 0 didn�t show elevated missingness in pit variables, so zeros appear to be legitimate measurements (e.g., stable conditions). We therefore kept zeros as valid values and treated only NA as missing.\n\n\n5. Physically defensible plausibility filters\nWe applied conservative real-world plausibility checks and recoded any violations to NA so they can be handled by imputation rather than ad-hoc edits. The limits reflect basic constraints (e.g., angles in \\(0{-}360^\\circ\\), non-negative depths) and local context.\n\nDirectional variables (Aspect, Wind.Dir, Summit.Wind.Dir): values outside \\([0^\\circ, 360^\\circ]\\) set to NA.\n\nSnow temperature (\\(^\\circ\\)C): values \\(&gt; 5\\) set to NA (snow cannot persist above \\(\\sim 0^\\circ\\)C; a small buffer accommodates sensor and entry noise).\n\nInsolation (index): values outside \\(0{-}20\\) set to NA.\n\nIncline (\\(^\\circ\\)): values \\(&lt;0\\) or \\(&gt;90\\) set to NA.\n\nFoot penetration (cm): values \\(&lt;0\\) or \\(&gt;100\\) set to NA.\n\nTotal snow depth (cm): values \\(&lt;0\\) or \\(&gt;500\\) set to NA (regional plausibility).\n\nMaximum temperature gradient (\\(^\\circ\\)C/10 cm): values \\(&gt; 10\\) set to NA.\n\nAltitude (m): values \\(&lt;0\\) or \\(&gt;1400\\) set to NA (Scotland�s highest peak \\(\\approx 1345\\) m).\n\nMarking impossible readings as NA prevents them from skewing summaries or model fits and lets the downstream multivariate imputer estimate plausible replacements from the remaining data.\n\n\n6. Altitude repair via coordinate-based elevation lookup\nFor the small number of missing altitudes, we queried an open elevation service at rounded (latitude, longitude) and filled Alt where a value was returned. One queried coordinate yielded \\(0\\) m (a sea-loch), indicating a geolocation error. For that single case, we replaced the coordinate with the area mean (Creag Meagaidh) and re-queried. To ensure deterministic compilation, elevation results are cached locally; subsequent runs read from cache if the service is unavailable.\n\n\n7. Circular encodings for directional variables\nCircular encodings for directional variables. Because angles wrap around at \\(360^\\circ\\), treating them as ordinary numbers creates an artificial jump between \\(359^\\circ\\) and \\(0^\\circ\\). We therefore replaced each directional variable (Wind.Dir, Summit.Wind.Dir, Aspect) with two new variables that locate the direction on the unit circle: the sine and cosine of the angle (in radians). This keeps \\(0^\\circ\\) and \\(360^\\circ\\) close in feature space, and removes the wrap-around discontinuity, which helps and yields smoother relationships for the models. Missing angles remained missing in both components and were imputed later.\n\n\n8. Time-aware splitting and leakage control\nThe data was split chronologically into \\(80\\%\\) training and \\(20\\%\\) test by calendar time (no overlap).Any rows missing a Date or the target (FAH_ord) were dropped before the split. We checked class balance in each split; the High level is very rare and does not appear in the test window (so performance on that class cannot be evaluated). All preprocessing steps were fit on the training set only (e.g., imputation, scaling, encoding) and then applied unchanged to the test set. This setup avoids information leakage.\n\n\n9. Pre-processing pipeline for modelling (recipes)\nA single, train-fitted recipes pipeline was implemented with the following stages:\n\nColumn exclusion: Dropped identifiers and free text, raw time stamps, and raw angles: OSgrid, Location, Date, DateTime, raw Wind.Dir, raw Summit.Wind.Dir, and raw Aspect. The raw target FAH was excluded in favour of FAH_ord.\n\nRare-level consolidation: Collapsed very rare categorical levels to \"other\" using \\(\\texttt{threshold} = 0.005\\) to avoid sparse dummies.\n\nImputation: Categorical variables were imputed by mode; numerical variables by bagged-tree imputation (bootstrap ensembles estimated on the training data), which captures non-linearities and interactions in mixed meteorological and snowpack features more effectively than mean or KNN imputation.\n\nEncoding: One-hot encoding of categorical predictors (including Area).\n\nVariance filtering: Removal of zero-variance and near-zero-variance predictors.\n\nScaling: Standardisation of numerical predictors, excluding the 0/1 informative-missing indicators (and area dummies) to preserve their interpretability.\n\nSeasonality: Replacement of discrete season dummies with smooth cyclical features \\(doy\\_sin\\) and \\(doy\\_cos\\) (constructed from day-of-year with leap years handled); season binaries were removed to reduce collinearity.\n\nTarget mapping: The ordered response was mapped once to integers \\(0{-}4\\) to provide a single source of truth for neural-network models.\n\nThe recipe was prepped on the training set (estimating imputation models, encoding maps, and scaling parameters) and then baked on both training and test splits to yield model-ready matrices (x_train, x_test). For downstream modelling and plotting, a Date column was retained; final matrices (\\(X\\_{train}\\), \\(X\\_{test}\\)) include the integer-encoded target as the last column.\n\n\n10. Reproducibility, diagnostics, and assumptions\nWe fixed random seeds and kept all data-prep and modelling steps in a single scripted pipeline so that results are reproducible across runs. After baking the recipe, there were no remaining missing values in either split. We re-checked the composite key (Date, OSgrid, Area) after duplicate handling, and we spot-checked distributions of imputed variables to make sure they looked reasonable (plots not shown for space). Elevation queries are cached locally, so reruns do not depend on the external service.\nOur working assumptions were:\n(i) the value ranges we used to flag implausible measurements reflect Scottish conditions;\n(ii) Snow.Index == 0 is a valid zero (stable conditions), not a stand-in for “no test”; and\n(iii) the “informative-missing” indicators genuinely capture absence at the time of collection rather than artefacts created later in cleaning.\n\n\n11. Limitations and sensitivity considerations\nThe High hazard class is rare (and absent in our test window) so standard accuracy alone can be misleading. We therefore report macro-averaged scores and discuss calibration in the results, but performance on the very rarest conditions remains uncertain. The plausibility cut-offs (e.g., the threshold for snow temperature) are conservative choices, not unique truths; reasonable alternatives could be used, and results may shift slightly.\nFinally, because we split by time, outcomes can vary with the split date (e.g., if conditions change from one season to the next). This is typical in operational forecasting; sensitivity checks (e.g., alternate split points or small variations in thresholds and look-back length) would be a natural extension.\n\n\n\nMethods: Neural ordinal forecasting model\nThis stage uses Python (PyTorch) to learn an ordinal mapping from the feature set prepared in R to the next-day hazard level (FAH). We (i) convert the tabular data into area-wise sequences with a 14-day look-back, (ii) train an LSTM + CORN head (Cumulative Ordinal Regression for Neural networks), (iii) handle imbalance by oversampling and class-balanced per-threshold weights, and (iv) tune monotone decision thresholds for converting CORN probabilities to class labels.\nOR:\nWe model next-day FAH (levels \\(0\\)-\\(4\\)) as an ordinal problem in PyTorch (Python). From the R-prepared matrices we build area-wise 14-day look-back sequences and train an LSTM with a CORN head (Cumulative Ordinal Regression for Neural Networks). We address class imbalance via oversampling and class-balanced per-threshold weights, then tune monotone (non-increasing) thresholds to turn CORN probabilities into class labels. Validation is time-aware (forward-chaining folds with a 10-day embargo), and early stopping uses Quadratic Weighted Kappa (QWK).\n\n\n&lt;torch._C.Generator object at 0x000001C26F3B2210&gt;\n\n\n\n1. Data interface and temporal windows\nWe read the preprocessed matrices exported from R (X_train.csv, X_test.csv). The response is the ordered integer \\(FAH_ord \\in \\{0, \\ldots, 4\\}\\) and a Date column is retained for temporal alignment.\nFor sequential learning we constructed area-wise sliding windows with look-back \\(L = 14\\) days and horizon \\(H = 0\\) (predict today�s FAH from the previous 14 days) (Lim and Zohren, 2021; Eq. 2.1). Predictors were split into:\n\nStatic features (fed once per window): longitude, latitude, altitude, incline, and the one-hot area indicators.\n\nDynamic features (fed as a length-\\(L\\) (\\(14\\)) sequence): all remaining numeric predictors after excluding static variables and the target. We also engineered FAH_prev (yesterday�s (FAH) hazard within the same area) and included it among the dynamic features. It is available operationally and does not leak future labels.\n\n\nThe train/test boundary follows the R split (\\(80\\%\\) earliest dates for training; remaining \\(20\\%\\) for testing). Windows are built after concatenating and then filtering by the target date so that nothing from the test period influences training.\n\n\n2. Architecture and loss (CORN-LSTM)\nThe network is an LSTM over the dynamic sequence. We take its last hidden state, concatenate it with the static features, pass it through a small MLP head, and then through a CORN layer.\n\nCORN (Formulation and Rationale): Instead of a single \\(K\\)-way softmax, CORN produces \\(K - 1\\) logits that answer ordered questions \\(\\Pr(y &gt; 0)\\), \\(\\Pr(y &gt; 1)\\), \\(\\ldots\\), \\(\\Pr(y &gt; K - 2)\\). Because these events become harder as \\(k\\) grows, their probabilities naturally decrease with \\(k\\) (Cao, Mirjalili and Raschka, 2020).\nTraining: We compute CORN targets from the true class and minimise binary cross-entropy on the \\(K - 1\\) logits.\nPrediction: At inference, we threshold the \\(K - 1\\) probabilities, count how many exceed their thresholds, and that count is the predicted FAH level.\nValidation metric: We report Quadratic Weighted Kappa (QWK), which rewards getting close on an ordinal scale (e.g., a \\(2 \\leftrightarrow 3\\) mistake is penalised less than \\(0 \\leftrightarrow 4\\)).\n\n\n\n3. Class imbalance handling\nHigh hazard levels are rare. We address this imbalance in two ways:\n\nBatch oversampling: Oversampling in the training loader (WeightedRandomSampler) to increase the frequency of rarer FAH levels during optimisation, so minority levels appear more often in batches.\n\nClass-balanced CORN loss: For each threshold \\(k\\), we compute a positive weight using the “effective number of samples” (\\(\\beta = 0.999\\)) and apply it in the BCE term, so rare exceedance events \\((y &gt; k)\\) contribute proportionally more without duplicating data (Cui et al., 2019).\n\n\n\n4. Validation protocol, hyperparameter search, and early stopping\nWe created forward-chaining time folds (\\(K=5\\)) with a 10-day embargo before each validation slice to avoid look-ahead leakage. We tuned hyperparameters with Optuna over:\n\nhidden size \\(\\{32, 48, 64\\}\\),\n\nnumber of LSTM layers \\(\\{1, 2\\}\\),\n\nhead dropout \\([0.1, 0.5]\\),\n\nRNN dropout (only if \\(\\geq 2\\) layers),\nlearning rate \\([10^{-4}, 3 \\times 10^{-3}]\\),\n\nweight decay \\([10^{-6}, 10^{-3}]\\),\n\nbatch size \\(\\{128, 256, 512\\}\\).\n\nThe objective was to maximise the mean QWK across folds. Training used Adam, gradient-norm clipping (1.0), and early stopping on validation QWK. After selection, the model was refit on all training windows and thresholds were calibrated on the most recent validation fold, then fixed for test.\n\n\n5. Threshold calibration (monotone \\(\\tau\\))\nCORN outputs \\(K - 1\\) probabilities. To turn them into labels, we tune monotone thresholds \\(\\tau_1 \\ge \\tau_2 \\ge \\cdots \\ge \\tau_{K-1}\\) on the latest validation fold using a simple grid over \\(0.3\\)-\\(0.7\\), selecting the vector that maximises QWK. The monotonicity is non-increasing because \\(\\Pr(y &gt; k)\\) decreases with \\(k\\); later thresholds should never be easier to exceed than earlier ones.\nThe tuned vector used for test was:\n\\[\n\\tau = [0.52, \\; 0.50, \\; 0.50, \\; 0.48].\n\\]\n\n\n6. Final refit and test evaluation\nWe refit the model on all training windows, keeping a small, chronological \\(90/10\\) tail for early stopping. We then evaluate once on the held-out test windows using the fixed \\(\\tau\\) vector above. Metrics reported are Accuracy, Macro-F1, MAE, and QWK, and include a confusion matrix and a per-class report in the Results.\n\n\n488\n\n\n\n\n7. Baselines\nFor context, we implemented three simple non-parametric reference models as baselines (all fitted only on training labels).\n\na global majority classifier that predicts the most frequent FAH level in the training labels,\n\na per-area majority classifier that uses the most frequent FAH level within each area (assigned to that area in test), and\n\na persistence rule \\(\\hat{y}_t = y_{t-1}\\) within area, with a majority fallback for an area�s first test day.\n\nWe report the same metrics used for the neural model (Accuracy, Macro-F1, MAE, QWK) to enable direct comparison."
  },
  {
    "objectID": "A1_Report_Final_Draft_html.html#results",
    "href": "A1_Report_Final_Draft_html.html#results",
    "title": "Avalanche Risk Prediction",
    "section": "Results",
    "text": "Results\nWe evaluate the tuned LSTM-CORN on the held-out test window and compare it with three simple baselines.\nAll settings were fixed before touching the test set. We report Accuracy, Macro-F1, MAE, and Quadratic Weighted Kappa (QWK);\na confusion matrix and per-class summary show where errors occur.\n\n\n                      Model       acc   macroF1       MAE       QWK\n0  LSTM-CORN (tuned $\\tau$)  0.642959  0.291774  0.439071  0.384026\n1         Majority (global)  0.305358  0.093571  0.735420  0.000000\n2       Majority (per-area)  0.392603  0.200081  0.755334  0.089535\n3      Persistence (y[t-1])  0.719298  0.455616  0.329066  0.658770\n\n\n\n\n\nTable 1\n\n\n\n\n\n\n\n\n\nValidation Set-Up\nWe validated with forward-chaining time folds and a 10-day embargo between training and validation windows, ensuring the model never “sees” information from the future of the validation period. Hyperparameters maximised mean QWK across folds, and after selection, we recalibrated thresholds on the most recent fold (the one closest in time to the test window).\n\n\nValidation = forward-chaining (K=5) with 10-day embargo; objective = mean QWK across folds.\n\n\n\n\nClass Balance: Train vs Test\nHigher hazard levels are rare, and the distribution also shifts over time. In our split the High level does not occur in the test window, which matters for both training and evaluation. The table below shows the proportion of each FAH level within each split (percents within Train/Test):\n\n\n   FAH level  Test rows  Train rows Test % Train %\n0          0     1209.0      2222.0  57.3%   26.3%\n1          1      644.0      2593.0  30.5%   30.7%\n2          2      171.0      2327.0   8.1%   27.5%\n3          3       84.0       849.0   4.0%   10.0%\n4          4        1.0       458.0   0.0%    5.4%\n\n\nThe training set shows a relatively balanced distribution across Levels 0-2 (approximately \\(26\\%\\)-\\(31\\%\\) each), with Level 3 at around \\(10\\%\\) and Level 4 at \\(5\\%\\) . The test set, however, is heavily skewed: Level 0 dominates ( \\(\\approx 57\\%\\)), followed by Level 1 (\\(31\\%\\) ), Level 2 (\\(8\\%\\)), Level 3 (\\(4\\%\\)), and Level 4 is virtually absent ( \\(\\sim 0\\%\\)).\nThis shift has important implications. A naive model that predicts Level 0 can achieve high Accuracy despite poor overall performance. Macro-F1 and QWK are therefore more informative, as they weight classes evenly and penalise larger ordinal errors. To address the imbalance, the training procedure uses oversampling and a class-balanced CORN loss, while threshold calibration on the final fold helps adapt the decision rule to the test distribution.\n\n\n\n\n\nBar Plot illustrating FAH class balance by split.\n\n\n\n\n\n\nTest Performance (Model vs Baselines)\nBelow we compare the tuned LSTM-CORN model with three simple baselines. We evaluate performance using four metrics: Accuracy, Macro-F1, Mean Absolute Error (MAE), and Quadratic Weighted Kappa (QWK). Accuracy measures the proportion of exact predictions but can be misleading under class imbalance (e.g., always predicting the majority class). Macro-F1 computes precision and recall per class, takes their harmonic mean, and averages equally across classes. This handles imbalance better but ignores class ordering. MAE uses the ordinal scale directly, averaging absolute differences between true and predicted levels (e.g., a miss of \\(0 \\to 1\\) counts as 1, while \\(0 \\to 4\\) counts as 4), with a range from \\(0\\) to \\(K - 1\\). QWK is a chance-corrected agreement measure that penalises larger ordinal gaps using quadratic weights. It ranges from 1 (perfect) to 0 (chance) and can be less than 0 (worse than chance), making it well suited to ordinal targets and useful for validation.\n\n\n                      Model       acc   macroF1       MAE       QWK\n0  LSTM-CORN (tuned $\\tau$)  0.642959  0.291774  0.439071  0.384026\n1         Majority (global)  0.305358  0.093571  0.735420  0.000000\n2       Majority (per-area)  0.392603  0.200081  0.755334  0.089535\n3      Persistence (y[t-1])  0.719298  0.455616  0.329066  0.658770\n\n\nOn the held-out test window, the persistence rule (predict today as yesterday within area) is the strongest comparator: QWK \\(\\approx 0.659\\), Accuracy \\(\\approx 0.719\\), MAE \\(\\approx 0.329\\), Macro-F1 \\(\\approx 0.456\\) The tuned LSTM-CORN improves markedly over the two majority heuristics but does not reach persistence, with QWK \\(\\approx 0.390\\), Accuracy \\(\\approx 0.648\\), MAE \\(\\approx 0.433\\), and Macro-F1 \\(\\approx 0.295\\).\n\nThe majority baselines are near chance in ordinal agreement (global QWK \\(\\approx 0\\); per-area QWK \\(\\approx 0.09\\)), confirming that always picking the common class is not competitive.\nTo read these numbers: QWK (Quadratic Weighted Kappa) is our most appropriate headline metric because it respects ordering, penalising large misses more than adjacent ones (higher is better). MAE reports the average absolute distance between forecast and truth on the 0-4 scale (lower is better). Accuracy is exact-match rate and can look flattering under imbalance, while Macro-F1 balances precision and recall across classes by giving each class equal weight.\nThe pattern suggests the test period is highly persistent and skewed toward lower hazard-there are no “High” days-so copying yesterday is often correct and unusually hard to beat. Although the neural model learns meaningful ordinal structure (clear gains over majority rules), it trails persistence on this particular window, likely due to strong day-to-day autocorrelation and a distribution shift between train and test.\nClass-wise performance is therefore uneven, with under-prediction at the upper levels and most errors occurring between adjacent categories-which QWK appropriately down-weights. In practice, persistence remains the operational benchmark in stable regimes, while the LSTM-CORN is most promising for anticipating changes in hazard; we examine this further via the confusion matrix and per-class summaries.\n\n\n\n\n\nQWK of the tuned LSTM-CORN model compared to the three simple baselines.\n\n\n\n\n\n\nConfusion Matrix and Per-Class Report\nThe matrix shows a clear ordinal pattern. Class 0 is predicted well (about \\(0.90\\) on the diagonal), with a small spill into class 1. For class 1, only \\(\\sim 0.39\\) stays on the diagonal, and \\(\\sim 0.58\\) is pushed down to 0; the model tends to under-forecast when conditions are near the 0/1 boundary. Class 2 is mostly confused with undefined (\\(\\approx 0.47\\)) and sometimes with 0 (\\(\\approx 0.37\\)); only \\(\\sim 0.16\\) is correct. Class 3 is rarely predicted directly (\\(\\sim 0.15\\) diagonal) and is most often mapped to 1 (\\(\\approx 0.52\\)) or 0 (\\(\\approx 0.31\\)). There is effectively no reliable signal for class 4 in the test window (support is 1 and it is predicted as a 1), so per-class scores for 4 are unstable and shouldn�t be over-interpreted.\nThis pattern matches the aggregate metrics reported earlier: overall accuracy and MAE are reasonable, but Macro-F1 and QWK suffer because the model compresses higher hazards toward the centre/lower classes. In other words, most errors are one-step, downward mistakes, good for avoiding extreme over-calls but conservative relative to true highs.\nIf the operational goal is to catch more 2-3 days (accepting some extra false alarms), you could lower the upper CORN thresholds slightly or use a cost-sensitive tuning target. If the priority is minimising over-warnings, the current calibration is aligned with that objective.\n      Class  precision  recall  f1-score  support\n0 0 0.696 0.907 0.788 1209 1 1 0.504 0.357 0.418 644 2 2 0.389 0.164 0.230 171 3 3 0.250 0.012 0.023 84 4 4 0.000 0.000 0.000 1 5 accuracy 0.643 0.643 0.643 0 6 macro avg 0.368 0.288 0.292 2109 7 weighted avg 0.594 0.643 0.599 2109\n\n\n\n\n\nNormalised confusion matrix for the test set (rows sum to 1). Numbers in cells are proportions.\n\n\n\n\n\n\nEffect of Threshold Calibration\nTuned monotone thresholds are intended to improve ordinal agreement over the default \\(0.5\\) cut-offs.\n\n\n        Cutoffs       acc   macroF1       MAE       QWK\n0  tuned $\\tau$  0.642959  0.291774  0.439071  0.384026\n1      0.5 flat  0.646752  0.296020  0.434329  0.390029\n\n\nWe re-evaluated the test set twice: once using the tuned monotone thresholds \\(\\tau = [0.52, 0.50, 0.50, 0.48]\\)\nand once using flat \\(0.5\\) cut-offs for all CORN logits. The two runs produced identical results:\nAccuracy \\(= 0.648\\), Macro-F1 \\(= 0.295\\), MAE \\(= 0.433\\), QWK \\(= 0.390\\).\nThis tells us that, on this test window, threshold calibration did not change any predicted labels.\nThat is consistent with two facts: (i) the tuned \\(\\tau\\) are very close to \\(0.5\\), and (ii) most cumulative probabilities were far from the decision boundaries, so nudging thresholds within \\(0.48\\)-\\(0.52\\) doesn�t flip classes.\nThis implies the model�s test performance is driven by the sequence model and learned representations, rather than by the post-hoc thresholds. We keep the tuned \\(\\tau\\) for completeness and because they can help when class balance shifts, but we do not claim a test-set gain from calibration here. If thresholding becomes more influential (e.g., under stronger distribution shift), broader grids, direct QWK optimisation, or area-specific \\(\\tau\\) could be explored.\n\n\nError Shape\n\n\n\n\n\nHistogram of absolute errors \\(|y_{\\text{true}} - y_{\\text{pred}}|\\) on the test set. Bars are centred at integer steps. Most errors are within one category, consistent with MAE \\(\\approx 0.43\\).\n\n\n\n\nThe figure above shows the distribution of absolute errors \\(|y_{\\text{true}} - y_{\\text{pred}}|\\) across FAH levels.\nThe model achieves an exact match on about 65% of test days (error \\(= 0\\)), and a further \\(\\sim 28\\)-\\(29\\%\\) are off by one category. Only \\(\\sim 6\\%\\) are off by two and \\(&lt;1\\%\\) by three; no four-step errors occur.\nThis aligns with the summary statistics (MAE \\(\\approx 0.43\\), median absolute error \\(\\approx 0\\)):\nin an ordinal setting, most misclassifications are near misses. Operationally, this means the model is usually within one hazard step of the issued level, even when it is wrong."
  },
  {
    "objectID": "A1_Report_Final_Draft_html.html#discussion",
    "href": "A1_Report_Final_Draft_html.html#discussion",
    "title": "Avalanche Risk Prediction",
    "section": "Discussion",
    "text": "Discussion\nThe held-out results paint a clear picture. Hazards in this period are highly persistent and skewed toward the lower levels, and the naive persistence rule (“predict today as yesterday within area”) performs very strongly on all summary metrics. Our tuned LSTM-CORN improves markedly over the two majority baselines, but it does not beat persistence on this particular test window.\n\nMetrics & Diagnostics\nAccuracy and MAE are reasonable for the neural model, but the QWK and macro-F1 show performance drops higher up the scale. This is consistent with the near-diagonal confusion matrix that has a downward bias (Level 1 is often pushed to 0; Levels 2-3 are frequently mapped to 1) while extreme over-calls are rare. The error histogram shows most misses are within one category (consistent with MAE \\(\\approx 0.43\\)): useful for avoiding false alarms, but conservative relative to true highs. Finally, threshold calibration had almost no effect (tuned \\(\\tau \\approx [0.52, 0.50, 0.50, 0.48]\\) and gave identical results to 0.5), which implies the limiting factor is representation/sequence learning, not the label cut-offs.\n\n\nWhy persistence wins here\nTwo data realities favour the \\(y[t-1]\\) rule:\n(i) strong day-to-day autocorrelation in FAH;\n(ii) imbalance and shift: the test window contains no “High” days and is dominated by Levels 0-1. In that regime, copying yesterday is genuinely hard to beat. The LSTM-CORN learns the ordinal structure and avoids wild swings, but with few upper-level examples and a short 14-day context, it struggles to escalate to 2-3 when the series does move.\n\n\nOperational interpretation\nIf the near-term goal is to minimise false alarms, the current calibration is acceptable: errors are mostly one-step and downward. If instead the priority is to catch emerging higher hazards, you would tolerate more false positives and lower the effective thresholds for the top levels (a cost-sensitive calibration). Either way, persistence remains a strong benchmark, and the neural-persistence disagreements are useful review flags.\n\n\nLimitations\nConclusions are conditioned on this split: the test window lacks class 4 entirely and has very few class 3 days, so per-class scores at the top end are unstable. The dataset is modest for sequence models, labels may contain operational noise, and we restricted the model to observed histories (no external forecasts), which caps lead-time sensitivity. We mitigated leakage with forward-chaining folds and an embargo, but results will vary with split point and winter severity.\n\n\nPossible Future Improvements\nShort-to-medium steps that fit the current pipeline:\n\nLonger and/or multi-scale context (e.g., 28-45 days plus recent 7-day summary features) to help detect trend changes.\n\nArea- or season-specific calibration of \\(\\tau\\), or a simple cost-sensitive threshold that weights upward errors more heavily.\n\nRicher dynamics: include forecasted weather (when available) and simple change features (day-to-day deltas, 7-day slopes).\n\nOrdinal-aware loss variants (e.g., ordinal focal/Tversky) to emphasise rare upward moves without exploding false alarms.\n\nModeling with persistence rather than against it: feed \\(y[t-1]\\) explicitly (we already include it) and/or ensemble the neural model with the persistence rule; use the ensemble to trigger escalation only when both agree.\n\nFor this winter slice, FAH rewards yesterday-equals-today. The LSTM-CORN gives mostly one-step, conservative predictions and clearly outperforms majority rules, but not persistence. With more imbalance-aware training, longer context, and cost-sensitive calibration or ensembling, it should provide earlier and more reliable hazard signals while retaining low false-alarm rates."
  },
  {
    "objectID": "A1_Report_Final_Draft_html.html#conclusion",
    "href": "A1_Report_Final_Draft_html.html#conclusion",
    "title": "Avalanche Risk Prediction",
    "section": "Conclusion",
    "text": "Conclusion\nThis work developed a reproducible pipeline for ordinal avalanche forecasting, combining structured data preparation, time-aware validation, and an LSTM-CORN model adjusted for class imbalance and monotone decision thresholds. On the held-out test window, the neural model outperforms both majority baselines but does not surpass persistence. This is expected given the strong day-to-day autocorrelation and the concentration of FAH at lower levels during this period.\nThe diagnostics are consistent with this outcome. The confusion matrix is near-diagonal with a slight downward bias, MAE (\\(\\approx 0.43\\)) indicates that most errors fall within one category, and threshold calibration has negligible effect. This suggests that the main limitations lie in the data regime and sequence representation rather than in the choice of decision cut-offs.\nFrom an operational perspective, the model is conservative and unlikely to produce extreme over-warnings. Its greatest value is in cases where it diverges from persistence, indicating potential changes in hazard. Sensitivity to rising risk could be improved through longer or multi-scale look-back periods, cost-sensitive or area- and season-specific calibration, the inclusion of forecasted weather and change features, and the use of ordinal focal or Tversky losses, or ensembling with persistence.\nAdditional “High” days and further winters will help stabilise estimates at the upper levels. Overall, the method is interpretable and extensible. With targeted refinements, it has the potential to provide earlier and more reliable indicators of increasing avalanche hazard while maintaining a low false alarm rate."
  },
  {
    "objectID": "A1_Report_Final_Draft_html.html#statement-on-the-use-of-ai-llms",
    "href": "A1_Report_Final_Draft_html.html#statement-on-the-use-of-ai-llms",
    "title": "Avalanche Risk Prediction",
    "section": "Statement on the use of AI (LLMs)",
    "text": "Statement on the use of AI (LLMs)\nChatGPT (GPT-5 Thinking, GPT-4) was used as a supporting tool for planning, explanation, code polishing, and presentation. All final decisions, code execution, checks, and writing are our own.\n\nAI Implementation and utilisation\n\n1) Ideas & planning (high-level, non-code)\nAt the start, we shared the assignment brief and asked for a sensible three-way split to manage scope and timelines (data preparation, modelling, and report integration). The initial split helped us coordinate responsibilities, and we adapted it to our context. See the following link: (https://chatgpt.com/share/68d91860-f4a4-8006-ae9c-06e71721af0a).\n\n\n2) Code\n\nData prep (R):\n\nModelling (PyTorch):\n\n\n\n\n3) Code polishing & integration\nWe used AI to make code presentable and navigable inside the report so a reader can follow the narrative and the code together:\n\nRefactored and streamlined/condensed code blocks (docstrings, clearer names, comments) without changing logic.\n\nAdded Quarto-friendly chunks (labels, captions, seeds) so outputs render reproducibly in PDF, this was especially utilised for Python chunks.\n\nWrote small utilities for CORN threshold tuning, evaluation, and plotting (confusion-matrix heatmap, metric tables), and debugged minor issues.\n\nDouble-checked that the time split and folds prevented leakage, and that train/test separation was respected in every data path.\n\nAny AI-suggested code was run directly by us, and retained only if it was correct, readable, and consistent with our pipeline.\n\n4) Writing (supplementary assistance - we retained authorial control)\nWe used AI as an editor and explainer, not as an author. It helped with coverage checks, clarity, and presentation. We kept control of the structure, final wording, and all technical claims.\n\nCoverage audit of Methods vs code: We asked AI to cross-check that everything happening in the code is actually described in the text (e.g., sequence construction, forward-chaining folds with an embargo, CORN targets and loss, threshold tuning, baselines). It flagged a few gaps and we filled them. Anything inaccurate was discarded.\n\nPlain-language tightening: It suggested alternative phrasings for the LSTM/CORN/QWK explanations and helped trim repetition so sections read cleanly without losing technical meaning.\n\nFlow and structure: It helped reorder sentences and add short signposts so paragraphs read as a narrative rather than a list of steps. However, overall narrative flow in the report is above the current abilities of AI (or at least for it to be done well and efficiently), so this was done independently.\nCaptions and presentation: It drafted first-pass figure/table captions, and we then aligned labels, units, and legends (e.g., rows=true/cols=pred in the confusion matrix, and helped provide metric definitions for us to include under the comparison table).\n\nConsistency sweep: We used it to spot inconsistencies in symbols and names (e.g., FAH_ord, \\(K\\), \\(\\tau\\)), units (\\(^\\circ C\\), cm, m/s), and split terminology (“train/test”, “validation fold”), and then standardised them across the report.\n\nWord-count management: It helped us condense our abstract, introduction, and conclusion into more concise versions. We only kept edits that preserved our meaning and emphasis.\n\nMicro-explanations for readers: Where code terms might block understanding (e.g., “oversampling”, “class-balanced loss”), it helped draft one-line, non-jargony explanations that we then rewrote in our own words and integrated within our written report.\n\nAs a way of keeping authorship and accuracy, we wrote the first drafts ourselves. AI suggestions were used as options, not final text. We rewrote text in our voice, verified technical statements against the code and outputs, and removed anything we did not understand. All numbers, metrics, thresholds, and plots were produced and checked by us.\n\n\n\nVerification and academic integrity\nWe executed every included code cell and verified shapes, date boundaries, splits, and metrics. We cross-checked explanations against the source code and cited literature. Where AI proposed code or text we didn�t fully understand, we reworked it or removed it. All preprocessing parameters were fit by us on the training set and applied to test via a baked pipeline; seeds and caches were used for reproducibility.\n\n\nRepresentative prompts\nThese examples reflect how we used AI (from our initial scoping and idea generation, through iterative prompt refinement, to final verification checks):\n\nPlanning: “Given this brief, propose a practical 3-way task split and a checklist of outputs/figures we�ll need. Keep it realistic for a short timeline.”\n\nMethod design: “In 3 to 4 sentences, justify forward-chaining validation with an embargo for next-day avalanche hazard. Operationally, not mathematically.”\n\nLearning the ordinal head (CORN): “I�m reading the Shi, Cao, and Raschka paper and not fully grasping it. Why use \\(K - 1\\) logits for \\(P(y &gt; k)\\)? How are targets built directly from labels, and how do monotone thresholds turn those probabilities into one class? Please explain in plain English with a tiny \\(K = 5\\) example and common pitfalls so I can understand this theory better.”\nImbalance rationale: “In a couple of sentences, explain why we oversample in batches and use class-balanced weights (\\(\\beta = 0.999\\)) for CORN. Emphasise rare exceedances without inventing data.”\n\nResults narrative: “Turn this metrics table (Accuracy, Macro-F1, MAE, QWK) into a brief, neutral comparison vs baselines. Additionally, explain what each metric means in one line so that I can try include a brief definitions when I introduce them”\nFigure polish (Quarto/PDF): “Give a captioned confusion-matrix heatmap (rows=true, cols=pred) with a readable palette and percent labels. Make it knitr/Quarto-ready.”\n\nQuarto snippets: “Produce labelled, captioned chunks for a confusion-matrix figure and a formatted metrics table suitable for PDF export.”\n\nAbstract tightening: “Cut this abstract to around 150 words. Keep aims (LSTM+CORN), time-aware validation, key metrics, and one-line takeaway.”\n\nIn each case, we reviewed/edited the draft and ran the code to confirm it worked with our data.\n\n\nLimits of the AI�s role\n\nNo autonomous analysis: AI did not choose the final methodology, set hyperparameters, or produce final results. Those came from our group�s design, runs, and checks.\n\nNo blind copying: We avoided pasting large blocks of AI generated text or code. Anything kept was edited and verified by us.\n\nPotential inaccuracies: LLMs can be wrong or overconfident. We treated explanations as suggestions, then validated against code and papers.\n\nNo access to private data or execution: AI did not run our experiments or access hidden datasets. We executed everything locally and controlled random seeds/caches.\n\nAuthorship and accountability: All interpretation, synthesis, and conclusions are ours. The AI�s role was assistive, not determinative."
  },
  {
    "objectID": "A1_Report_Final_Draft_html.html#benefits",
    "href": "A1_Report_Final_Draft_html.html#benefits",
    "title": "Avalanche Risk Prediction",
    "section": "Benefits",
    "text": "Benefits\nUsing an LLM mainly helped with structure, clarity, and polish while we kept control of the ideas, code, and results.\n\nEditorial shaping: It can take a rough draft and provide insights into how to make it more concise and appropriate for a scientific report, by suggesting tightening sentences. This allows us to still keep our tone and intent intact.\n\nClarity through compression: It reduces repetition and surfaces the main argument, which helped us get to the core of what we were trying to say (especially in terms of structuring a Methods Section and when trying to integrate a short literature review inside the Introduction).\n\nDecomposing chaotic sections: When a section felt messy, offered points on how to reorganised it into digestible pieces (clear paragraphs, headings, short lists) so readers can follow the logic.\n\nAudience-fit translation: It can help turn code-heavy or jargony passages into plain-English explanations that are self-contained, so the report stands on its own without the reader opening the code.\n\nCode ideation & efficiency: Once we were clear on intent, it proposed cleaner patterns (small utilities, vectorised operations, reusable plotting functions). We only kept changes that we verified improved readability or runtime without altering results.\n\nFormatting and presentation: It sped up figure/table styling for PDF (captions, labels, palettes, legends) and Quarto chunk hygiene (seeds, paths, cache). This helps save us time we could spend on analysis.\n\nConsistency checks: It was useful for quick passes on naming, units, date boundaries, and split logic, reducing accidental inconsistencies across sections.\n\nFocused learning support: For more complex sections (e.g., CORN thresholds, QWK) it provided explanations and examples for us to better understand the theory.\n\nCognitive offloading: It generated checklists, micro-templates, and alternative phrasings on demand, which helped us move faster without skipping the verification steps.\nSanity checks: It was useful for quick checks on validation design (forward-chaining + embargo), metric definitions, and common pitfalls. This saved us time while we kept control of decisions.\n\nOverall, the LLM worked like a sharp editor and sounding board: it helped us restructure, clarify, and polish, while we did the design, execution, and final judgement calls."
  },
  {
    "objectID": "A1_Report_Final_Draft_html.html#references",
    "href": "A1_Report_Final_Draft_html.html#references",
    "title": "Avalanche Risk Prediction",
    "section": "References",
    "text": "References\n\nStatham, G., Haegeli, P., Greene, E., Birkeland, K., Israelson, C., Tremper, B. and Kelly, J. (2018) ‘A conceptual model of avalanche hazard’, Natural Hazards, 90(2), pp. 663-691. https://doi.org/10.1007/s11069-017-3070-5.\nOpenAI (2025) ChatGPT-5 Thinking (Sep 28 version) [Large language model software]. Available at: https://chatgpt.com/ (Accessed: 28 September 2025).\nOpenAI (2024) ChatGPT-4 (Sep 28 version) [Large language model software]. Available at: https://chat.openai.com/ (Accessed: 28 September 2025).\nCui, Y., Jia, M., Lin, T.-Y. and Song, Y. (2019) ‘Class-Balanced Loss Based on Effective Number of Samples’, in Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), pp. 9268-9277. https://doi.org/10.1109/CVPR.2019.00949.\nShi, X., Cao, W. and Raschka, S. (2021) ‘Deep Neural Networks for Rank-Consistent Ordinal Regression Based on Conditional Probabilities’, arXiv preprint arXiv:2111.08851. Available at: https://arxiv.org/abs/2111.08851.\nLim, B. and Zohren, S. (2021) ‘Time-series forecasting with deep learning: a survey’, Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences, 379(2194), 20200209. https://doi.org/10.1098/rsta.2020.0209."
  },
  {
    "objectID": "A1_Report_Final_Draft_html.html#appendix",
    "href": "A1_Report_Final_Draft_html.html#appendix",
    "title": "Avalanche Risk Prediction",
    "section": "Appendix",
    "text": "Appendix\n\nData Figures\n\n\n\n\n\nProportion of FAH levels in the train and test splits (row-level)\n\n\n\n\n\n\n\n\n\nPercentage of missing values by variable (top 25).\n\n\n\n\nThis uniqueness summary indicates that after consolidation, \\(99.9\\%\\) of (Date, OSgrid, Area) keys were unique.\nWe found \\(12\\) keys with duplicates (\\(8\\) keys with 2 rows; \\(4\\) with \\(\\geq 3\\)).\nConflict cases were retained and flagged; duplicates that differed only by missingness were collapsed (4 rows collapsed).\n\n\n\n\n\nObserved vs imputed distributions.\n\n\n\n\n\n\n\nObserved vs imputed distributions.\n\n\n\n\n\n\n\nObserved vs imputed distributions.\n\n\n\n\n\n\nModel / Results Figures\n\n\n\n\n\nConfusion matrix on the test set; numbers show counts (top) and row-normalised rates (bottom)\n\n\n\n\n\n\n\n\n\nPer-class precision, recall, and F1 on the test set.\n\n\n\n\n\n\n\n\n\nComparison of the neural model to baselines on QWK (higher is better) and MAE (lower is better).\n\n\n\n\n\n\n\n\n\nTuned CORN decision thresholds (\\(\\tau\\)) used to convert probabilities into ordinal labels.\n\n\n\n\n\n\n\n\n\nProportion of FAH levels at the window level (what the LSTM actually trained on) in train vs test."
  }
]