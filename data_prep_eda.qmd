---
title: "Data Preparation and EDA"
---

```{r echo=F}
# read in the data
aval <- read.csv("scotland_avalanche_forecasts_2009_2025.csv")

set.seed(5073)
library(tidyverse); library(lubridate); library(naniar); library(janitor)
library(tidymodels); library(forcats)
```

# Investigate missing data

```{r echo=F}
# quick checks
colnames(aval)
colSums(is.na(aval)) # number of missing values in each column
str(aval) # data type of each column

# remove OAH: observed avalanche hazard
aval <- aval %>% select(-OAH)
```

```{r echo=F}
# clean the data by casting variables as correct types
# STEP 1 — Fix types & engineer helper features (with OAH removed)

aval <- aval %>%
  mutate(
    # --- time features ---
    DateTime = ymd_hms(Date, quiet = TRUE),
    # strip out year, month and day:
    Date     = as.Date(DateTime),
    year     = year(Date),
    month    = month(Date),
    doy      = yday(Date),
    # create a new variable: season
    season   = factor(case_when(
      month %in% c(12,1,2) ~ "DJF",
      month %in% c(3,4,5)  ~ "MAM",
      month %in% c(6,7,8)  ~ "JJA",
      TRUE                 ~ "SON"
    ), levels = c("DJF","MAM","JJA","SON")),

    # --- categorical / IDs ---
    Area     = factor(Area),
    OSgrid   = as.character(OSgrid),
    Location = as.character(Location),
    Obs      = factor(Obs),

    # --- hazard (target) as ordered factor ---
    FAH_ord  = factor(
      FAH,
      # specify the following order:
      levels  = c("Low","Moderate","Considerable -","Considerable","Considerable +","High"),
      ordered = TRUE
    ),

    # --- circular encodings for angles ---
    # since 0 degrees is equivalent to 360, we change these variables.
    # ex. 350 is close to 0 directionally, but numerically far
    # map angles onto unit circle
    Wind.Dir_sin        = sin(pi * Wind.Dir/180),
    Wind.Dir_cos        = cos(pi * Wind.Dir/180),
    Summit.Wind.Dir_sin = sin(pi * Summit.Wind.Dir/180),
    Summit.Wind.Dir_cos = cos(pi * Summit.Wind.Dir/180),

    # aspect (if degrees)
    Aspect_sin = sin(pi * Aspect/180),
    Aspect_cos = cos(pi * Aspect/180)
  )


```



```{r echo=F}
# number of unique and missing values for each variable:
n_total <- nrow(aval)

var_summary <- aval %>%
  summarise(across(
    everything(),
    list(
      unique_vals  = ~n_distinct(.),
      missing_vals = ~sum(is.na(.))
    ),
    .names = "{.col}__{.fn}"      # <-- double underscore here
  )) %>%
  pivot_longer(
    everything(),
    names_to   = c("variable", ".value"),
    names_sep  = "__"             # <-- and the same separator here
  ) %>%
  mutate(pct_missing = round(100 * missing_vals / n_total, 2)) %>%
  arrange(desc(pct_missing), variable)

var_summary
```

```{r echo=F}
# is long and lat constant within OSgrid?
aval %>%
  group_by(OSgrid) %>%
  summarise(n_coords = n_distinct(paste(longitude, latitude)), .groups = "drop") %>%
  filter(n_coords > 1)
# yes, thus long and lat is the coordinates of different sites, OSgrid

# is Alt the same within each OSgrid?
aval %>%
  group_by(OSgrid) %>%
  summarise(n_alt = n_distinct(Alt), .groups = "drop") %>%
  filter(n_alt > 1)
## no: cannot use Osgrid to impute missing Alt
```

```{r echo=F}
# Per-variable % missing
miss_summary <- aval %>%
  summarise(across(
    everything(),
    ~mean(is.na(.)) * 100
  )) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "pct_missing") %>%
  arrange(desc(pct_missing))

miss_summary

# Visual overview
naniar::gg_miss_var(aval)
naniar::vis_miss(aval)
```

From the above, only 10 variables have more than 5% of their values missing. Careful attention is paid to these below. The remaining variables have $<5\%$ missing values and will simply be imputed with a K-Nearest Neighbor approach.

Of the variables missing more than 5%, we first need to determine if the missingness carries meaning. The list of variables is thus split in two, one where missingness does carry meaning and need to be accounted for and one where it does not.

The variables that do need to be accounted for are:
- **`AV.Cat` (23.4%)**: Missing avalanche category values likely mean that no category was assigned for that day. Forecasters usually provide a category when avalanches are observed or when conditions are clear enough to classify. If it is missing, that could itself indicate that avalanches were not observed or that conditions were uncertain, which is meaningful information about overall stability.  

- **`Ski.Pen` (22.5%)**: Ski penetration is only recorded when conditions allow observers to ski on the slope. If this field is missing, it often means the snow was too hard, too shallow, or otherwise unsuitable for skiing. This absence therefore reflects snow surface properties that can be related to avalanche hazard.  

- **`Crystals` (9.3%)**: Crystal type is identified through snow-pit observations. Missing values here often mean that no pit was dug on that day, which in turn may depend on perceived stability, time constraints, or safety concerns. Thus, the lack of a crystal observation can itself provide information about conditions.  

- **`Wetness` (5.4%)**: Wetness is typically noted when meltwater or damp snow is present. If this field is missing, it may indicate that the snow was dry and that observers did not see a reason to record wetness. Hence, missingness can indirectly point to dry-snow conditions.  

- **`Snow.Index` (7.0%)**: This is a derived stability metric based on snowpack tests. If the value is missing, it likely means the relevant tests were not carried out, perhaps because conditions didn’t warrant them. This absence can therefore reflect judgments about snow stability.  

- **`Summit.Wind.Dir_sin / Summit.Wind.Dir_cos` (12.4%), `Summit.Wind.Speed` (8.5%), and `Summit.Air.Temp` (7.1%)**: Missing summit weather variables may not just be sensor errors. It is plausible that readings were unavailable because weather at the summit was too extreme or dangerous for measurement, such as during storms or blizzards. In that case, missingness itself could be linked to hazardous conditions.  

For each of these, an indicator will be created to show if the value was missing.

Those variables that do not need explicit missingness indicators are:

- **`Max.Temp.Grad` (6.7%)**: This variable reflects temperature gradients measured in snow-pit tests. When missing, it is usually because the snow-pit test was not performed. However, the decision not to perform a pit is already captured by other variables where missingness is more clearly informative (e.g. `Crystals`, `Snow.Index`). Adding another indicator here would add redundancy without extra insight. The values themselves will be imputed with KNN.  

- **`Max.Hardness.Grad` (5.9%)**: Like `Max.Temp.Grad`, hardness gradients are only measured in pits. Missing values again overlap with the same “pit not performed” scenario already captured by other indicators. For this reason, a separate indicator is unnecessary. The variable will be imputed with KNN to fill the missing numeric values.  

```{r}
# add the indicator variables
aval <- aval %>%
  mutate(
    av_cat_missing            = as.integer(is.na(AV.Cat)),
    ski_pen_missing           = as.integer(is.na(Ski.Pen)),
    crystals_missing          = as.integer(is.na(Crystals)),
    wetness_missing           = as.integer(is.na(Wetness)),
    snow_index_missing        = as.integer(is.na(Snow.Index)),
    summit_wind_dir_missing   = as.integer(is.na(Summit.Wind.Dir)),
    summit_wind_speed_missing = as.integer(is.na(Summit.Wind.Speed)),
    summit_air_temp_missing   = as.integer(is.na(Summit.Air.Temp))
  )
```


```{r}
unique(aval$AV.Cat)
unique(aval$Ski.Pen)
```


todo
- check for duplicates after imputing missing values. (noticed there are less unique dates than there are # obs)

```{r}
# remove the original variables:
aval <- aval %>%
  select(-Wind.Dir, -Summit.Wind.Dir, -Aspect)   # drop originals
```

